// Code generated by cmd/cgo; DO NOT EDIT.

//line /tmp/build_aur/yay/src/yay-9.4.2/vendor/github.com/Jguer/go-alpm/alpm.go:1:1
// alpm.go - Implements exported libalpm functions.
//
// Copyright (c) 2013 The go-alpm Authors
//
// MIT Licensed. See LICENSE for details.

package alpm

// #cgo LDFLAGS: -lalpm
// #include <alpm.h>
import _ "unsafe"

import "unsafe"

// Init initializes alpm handle
func Initialize(root, dbpath string) (*Handle, error) {
	cRoot := ( /*line :17:11*/_Cfunc_CString /*line :17:19*/)(root)
	cDBPath := ( /*line :18:13*/_Cfunc_CString /*line :18:21*/)(dbpath)
	var cErr  /*line :19:11*/_Ctype_alpm_errno_t /*line :19:25*/
	h := ( /*line :20:7*/_Cfunc_alpm_initialize /*line :20:23*/)(cRoot, cDBPath, &cErr)

	defer func() func() { _cgo0 := /*line :22:15*/unsafe.Pointer(cRoot); return func() { _cgoCheckPointer(_cgo0); _Cfunc_free(_cgo0); }}()()
	defer func() func() { _cgo0 := /*line :23:15*/unsafe.Pointer(cDBPath); return func() { _cgoCheckPointer(_cgo0); _Cfunc_free(_cgo0); }}()()

	if cErr != 0 {
		return nil, Error(cErr)
	}

	return &Handle{h}, nil
}

// Release releases the alpm handle
func (h *Handle) Release() error {
	if er := func() _Ctype_int{ _cgo0 := /*line :34:26*/h.ptr; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_release(_cgo0); }(); er != 0 {
		return Error(er)
	}
	h.ptr = nil
	return nil
}

// LastError gets the last pm_error
func (h *Handle) LastError() error {
	if h.ptr != nil {
		cErr := func() _Ctype_alpm_errno_t{ _cgo0 := /*line :44:24*/h.ptr; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_errno(_cgo0); }()
		if cErr != 0 {
			return Error(cErr)
		}
	}
	return nil
}

// Version returns libalpm version string.
func Version() string {
	return ( /*line :54:9*/_Cfunc_GoString /*line :54:18*/)(( /*line :54:20*/_Cfunc_alpm_version /*line :54:33*/)())
}
