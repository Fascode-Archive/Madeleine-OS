// Code generated by cmd/cgo; DO NOT EDIT.

//line /tmp/build_aur/yay/src/yay-9.4.2/vendor/github.com/Jguer/go-alpm/handle.go:1:1
// handle.go - libalpm handle type and methods.
//
// Copyright (c) 2013 The go-alpm Authors
//
// MIT Licensed. See LICENSE for details.

// Package alpm implements Go bindings to the libalpm library used by Pacman,
// the Arch Linux package manager. Libalpm allows the creation of custom front
// ends to the Arch Linux package ecosystem.
//
// Libalpm does not include support for the Arch User Repository (AUR).
package alpm

// #include <alpm.h>
// #include <stdio.h> //C.free
// #include <fnmatch.h> //C.FNM_NOMATCH
import _ "unsafe"

import (
	"unsafe"
)

// Handle contains the pointer to the alpm handle
type Handle struct {
	ptr * /*line :25:7*/_Ctype_struct___alpm_handle_t /*line :25:22*/
}

//
//alpm options getters and setters
//

//helper functions for wrapping list_t getters and setters
func (h *Handle) optionGetList(f func(* /*line :33:40*/_Ctype_struct___alpm_handle_t /*line :33:55*/) * /*line :33:58*/_Ctype_struct___alpm_list_t /*line :33:71*/) (StringList, error) {
	alpmList := f(h.ptr)
	goList := StringList{(*list)(unsafe.Pointer(alpmList))}

	if alpmList == nil {
		return goList, h.LastError()
	}
	return goList, nil
}

func (h *Handle) optionSetList(hookDirs []string, f func(* /*line :43:59*/_Ctype_struct___alpm_handle_t /*line :43:74*/, * /*line :43:77*/_Ctype_struct___alpm_list_t /*line :43:90*/)  /*line :43:92*/_Ctype_int /*line :43:97*/) error {
	var list * /*line :44:12*/_Ctype_struct___alpm_list_t /*line :44:25*/

	for _, dir := range hookDirs {
		cDir := ( /*line :47:11*/_Cfunc_CString /*line :47:19*/)(dir)
		list = func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :48:26*/list; _cgo1 := /*line :48:32*/unsafe.Pointer(cDir); _cgoCheckPointer(_cgo0); _cgoCheckPointer(_cgo1); return _Cfunc_alpm_list_add(_cgo0, _cgo1); }()
		defer func() func() { _cgo0 := /*line :49:16*/unsafe.Pointer(cDir); return func() { _cgoCheckPointer(_cgo0); _Cfunc_free(_cgo0); }}()()
	}

	ok := f(h.ptr, list)
	if ok < 0 {
		return h.LastError()
	}
	return nil
}

func (h *Handle) optionAddList(hookDir string, f func(* /*line :59:56*/_Ctype_struct___alpm_handle_t /*line :59:71*/, * /*line :59:74*/_Ctype_char /*line :59:80*/)  /*line :59:82*/_Ctype_int /*line :59:87*/) error {
	cHookDir := ( /*line :60:14*/_Cfunc_CString /*line :60:22*/)(hookDir)
	defer func() func() { _cgo0 := /*line :61:15*/unsafe.Pointer(cHookDir); return func() { _cgoCheckPointer(_cgo0); _Cfunc_free(_cgo0); }}()()
	ok := f(h.ptr, cHookDir)
	if ok < 0 {
		return h.LastError()
	}
	return nil
}

func (h *Handle) optionRemoveList(dir string, f func(* /*line :69:55*/_Ctype_struct___alpm_handle_t /*line :69:70*/, * /*line :69:73*/_Ctype_char /*line :69:79*/)  /*line :69:81*/_Ctype_int /*line :69:86*/) (bool, error) {
	cDir := ( /*line :70:10*/_Cfunc_CString /*line :70:18*/)(dir)
	ok := f(h.ptr, cDir)
	defer func() func() { _cgo0 := /*line :72:15*/unsafe.Pointer(cDir); return func() { _cgoCheckPointer(_cgo0); _Cfunc_free(_cgo0); }}()()
	if ok < 0 {
		return ok == 1, h.LastError()
	}
	return ok == 1, nil
}

func (h *Handle) optionMatchList(dir string, f func(* /*line :79:54*/_Ctype_struct___alpm_handle_t /*line :79:69*/, * /*line :79:72*/_Ctype_char /*line :79:78*/)  /*line :79:80*/_Ctype_int /*line :79:85*/) (bool, error) {
	cDir := ( /*line :80:10*/_Cfunc_CString /*line :80:18*/)(dir)
	ok := f(h.ptr, cDir)
	defer func() func() { _cgo0 := /*line :82:15*/unsafe.Pointer(cDir); return func() { _cgoCheckPointer(_cgo0); _Cfunc_free(_cgo0); }}()()
	if ok == 0 {
		return true, nil
	} else if ok == ( /*line :85:18*/_Ciconst_FNM_NOMATCH /*line :85:30*/) {
		return false, h.LastError()
	}
	return false, nil
}

//helper functions for *char based getters and setters
func (h *Handle) optionGetStr(f func(* /*line :92:39*/_Ctype_struct___alpm_handle_t /*line :92:54*/) * /*line :92:57*/_Ctype_char /*line :92:63*/) (string, error) {
	cStr := f(h.ptr)
	str := ( /*line :94:9*/_Cfunc_GoString /*line :94:18*/)(cStr)
	if cStr == nil {
		return str, h.LastError()
	}

	return str, nil
}

func (h *Handle) optionSetStr(str string, f func(* /*line :102:51*/_Ctype_struct___alpm_handle_t /*line :102:66*/, * /*line :102:69*/_Ctype_char /*line :102:75*/)  /*line :102:77*/_Ctype_int /*line :102:82*/) error {
	cStr := ( /*line :103:10*/_Cfunc_CString /*line :103:18*/)(str)
	defer func() func() { _cgo0 := /*line :104:15*/unsafe.Pointer(cStr); return func() { _cgoCheckPointer(_cgo0); _Cfunc_free(_cgo0); }}()()
	ok := f(h.ptr, cStr)

	if ok < 0 {
		h.LastError()
	}
	return nil
}

//
//end of helpers
//

func (h *Handle) Root() (string, error) {
	return h.optionGetStr(func(handle * /*line :118:37*/_Ctype_struct___alpm_handle_t /*line :118:52*/) * /*line :118:55*/_Ctype_char /*line :118:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :119:33*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_root(_cgo0); }()
	})
}

func (h *Handle) DBPath() (string, error) {
	return h.optionGetStr(func(handle * /*line :124:37*/_Ctype_struct___alpm_handle_t /*line :124:52*/) * /*line :124:55*/_Ctype_char /*line :124:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :125:35*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_dbpath(_cgo0); }()
	})
}

func (h *Handle) Lockfile() (string, error) {
	return h.optionGetStr(func(handle * /*line :130:37*/_Ctype_struct___alpm_handle_t /*line :130:52*/) * /*line :130:55*/_Ctype_char /*line :130:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :131:37*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_lockfile(_cgo0); }()
	})
}

func (h *Handle) CacheDirs() (StringList, error) {
	return h.optionGetList(func(handle * /*line :136:38*/_Ctype_struct___alpm_handle_t /*line :136:53*/) * /*line :136:56*/_Ctype_struct___alpm_list_t /*line :136:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :137:38*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_cachedirs(_cgo0); }()
	})
}

func (h *Handle) AddCacheDir(hookDir string) error {
	return h.optionAddList(hookDir, func(handle * /*line :142:47*/_Ctype_struct___alpm_handle_t /*line :142:62*/, str * /*line :142:69*/_Ctype_char /*line :142:75*/)  /*line :142:77*/_Ctype_int /*line :142:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :143:37*/handle; var _cgo1 *_Ctype_char = /*line :143:45*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_add_cachedir(_cgo0, _cgo1); }()
	})
}

func (h *Handle) SetCacheDirs(hookDirs []string) error {
	return h.optionSetList(hookDirs, func(handle * /*line :148:48*/_Ctype_struct___alpm_handle_t /*line :148:63*/, l * /*line :148:68*/_Ctype_struct___alpm_list_t /*line :148:81*/)  /*line :148:83*/_Ctype_int /*line :148:88*/ {
		return func() _Ctype_int{ _cgo0 := /*line :149:38*/handle; _cgo1 := /*line :149:46*/l; _cgoCheckPointer(_cgo0); _cgoCheckPointer(_cgo1); return _Cfunc_alpm_option_set_cachedirs(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveCacheDir(dir string) (bool, error) {
	return h.optionRemoveList(dir, func(handle * /*line :154:46*/_Ctype_struct___alpm_handle_t /*line :154:61*/, str * /*line :154:68*/_Ctype_char /*line :154:74*/)  /*line :154:76*/_Ctype_int /*line :154:81*/ {
		return func() _Ctype_int{ _cgo0 := /*line :155:40*/handle; var _cgo1 *_Ctype_char = /*line :155:48*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_remove_cachedir(_cgo0, _cgo1); }()
	})
}

func (h *Handle) HookDirs() (StringList, error) {
	return h.optionGetList(func(handle * /*line :160:38*/_Ctype_struct___alpm_handle_t /*line :160:53*/) * /*line :160:56*/_Ctype_struct___alpm_list_t /*line :160:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :161:37*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_hookdirs(_cgo0); }()
	})
}

func (h *Handle) AddHookDir(hookDir string) error {
	return h.optionAddList(hookDir, func(handle * /*line :166:47*/_Ctype_struct___alpm_handle_t /*line :166:62*/, str * /*line :166:69*/_Ctype_char /*line :166:75*/)  /*line :166:77*/_Ctype_int /*line :166:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :167:36*/handle; var _cgo1 *_Ctype_char = /*line :167:44*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_add_hookdir(_cgo0, _cgo1); }()
	})
}

func (h *Handle) SetHookDirs(hookDirs []string) error {
	return h.optionSetList(hookDirs, func(handle * /*line :172:48*/_Ctype_struct___alpm_handle_t /*line :172:63*/, l * /*line :172:68*/_Ctype_struct___alpm_list_t /*line :172:81*/)  /*line :172:83*/_Ctype_int /*line :172:88*/ {
		return func() _Ctype_int{ _cgo0 := /*line :173:37*/handle; _cgo1 := /*line :173:45*/l; _cgoCheckPointer(_cgo0); _cgoCheckPointer(_cgo1); return _Cfunc_alpm_option_set_hookdirs(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveHookDir(dir string) (bool, error) {
	return h.optionRemoveList(dir, func(handle * /*line :178:46*/_Ctype_struct___alpm_handle_t /*line :178:61*/, str * /*line :178:68*/_Ctype_char /*line :178:74*/)  /*line :178:76*/_Ctype_int /*line :178:81*/ {
		return func() _Ctype_int{ _cgo0 := /*line :179:39*/handle; var _cgo1 *_Ctype_char = /*line :179:47*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_remove_hookdir(_cgo0, _cgo1); }()
	})
}

func (h *Handle) LogFile() (string, error) {
	return h.optionGetStr(func(handle * /*line :184:37*/_Ctype_struct___alpm_handle_t /*line :184:52*/) * /*line :184:55*/_Ctype_char /*line :184:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :185:36*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_logfile(_cgo0); }()
	})
}

func (h *Handle) SetLogFile(str string) error {
	return h.optionSetStr(str, func(handle * /*line :190:42*/_Ctype_struct___alpm_handle_t /*line :190:57*/, c_str * /*line :190:66*/_Ctype_char /*line :190:72*/)  /*line :190:74*/_Ctype_int /*line :190:79*/ {
		return func() _Ctype_int{ _cgo0 := /*line :191:36*/handle; var _cgo1 *_Ctype_char = /*line :191:44*/c_str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_set_logfile(_cgo0, _cgo1); }()
	})
}

func (h *Handle) GPGDir() (string, error) {
	return h.optionGetStr(func(handle * /*line :196:37*/_Ctype_struct___alpm_handle_t /*line :196:52*/) * /*line :196:55*/_Ctype_char /*line :196:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :197:35*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_gpgdir(_cgo0); }()
	})
}

func (h *Handle) SetGPGDir(str string) error {
	return h.optionSetStr(str, func(handle * /*line :202:42*/_Ctype_struct___alpm_handle_t /*line :202:57*/, c_str * /*line :202:66*/_Ctype_char /*line :202:72*/)  /*line :202:74*/_Ctype_int /*line :202:79*/ {
		return func() _Ctype_int{ _cgo0 := /*line :203:35*/handle; var _cgo1 *_Ctype_char = /*line :203:43*/c_str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_set_gpgdir(_cgo0, _cgo1); }()
	})
}

func (h *Handle) UseSyslog() (bool, error) {
	ok := func() _Ctype_int{ _cgo0 := /*line :208:36*/h.ptr; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_usesyslog(_cgo0); }()
	b := false

	if ok > 0 {
		b = true
	}
	if ok < 0 {
		return b, h.LastError()
	}
	return b, nil
}

func (h *Handle) SetUseSyslog(value bool) error {
	var intValue  /*line :221:15*/_Ctype_int /*line :221:20*/
	if value {
		intValue = 1
	}

	ok := func() _Ctype_int{ _cgo0 := /*line :226:36*/h.ptr; var _cgo1 _Ctype_int = /*line :226:43*/intValue; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_set_usesyslog(_cgo0, _cgo1); }()
	if ok < 0 {
		return h.LastError()
	}
	return nil
}

func (h *Handle) NoUpgrades() (StringList, error) {
	return h.optionGetList(func(handle * /*line :234:38*/_Ctype_struct___alpm_handle_t /*line :234:53*/) * /*line :234:56*/_Ctype_struct___alpm_list_t /*line :234:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :235:39*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_noupgrades(_cgo0); }()
	})
}

func (h *Handle) AddNoUpgrade(hookDir string) error {
	return h.optionAddList(hookDir, func(handle * /*line :240:47*/_Ctype_struct___alpm_handle_t /*line :240:62*/, str * /*line :240:69*/_Ctype_char /*line :240:75*/)  /*line :240:77*/_Ctype_int /*line :240:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :241:38*/handle; var _cgo1 *_Ctype_char = /*line :241:46*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_add_noupgrade(_cgo0, _cgo1); }()
	})
}

func (h *Handle) SetNoUpgrades(hookDirs []string) error {
	return h.optionSetList(hookDirs, func(handle * /*line :246:48*/_Ctype_struct___alpm_handle_t /*line :246:63*/, l * /*line :246:68*/_Ctype_struct___alpm_list_t /*line :246:81*/)  /*line :246:83*/_Ctype_int /*line :246:88*/ {
		return func() _Ctype_int{ _cgo0 := /*line :247:39*/handle; _cgo1 := /*line :247:47*/l; _cgoCheckPointer(_cgo0); _cgoCheckPointer(_cgo1); return _Cfunc_alpm_option_set_noupgrades(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveNoUpgrade(dir string) (bool, error) {
	return h.optionRemoveList(dir, func(handle * /*line :252:46*/_Ctype_struct___alpm_handle_t /*line :252:61*/, str * /*line :252:68*/_Ctype_char /*line :252:74*/)  /*line :252:76*/_Ctype_int /*line :252:81*/ {
		return func() _Ctype_int{ _cgo0 := /*line :253:41*/handle; var _cgo1 *_Ctype_char = /*line :253:49*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_remove_noupgrade(_cgo0, _cgo1); }()
	})
}

func (h *Handle) MatchNoUpgrade(dir string) (bool, error) {
	return h.optionMatchList(dir, func(handle * /*line :258:45*/_Ctype_struct___alpm_handle_t /*line :258:60*/, str * /*line :258:67*/_Ctype_char /*line :258:73*/)  /*line :258:75*/_Ctype_int /*line :258:80*/ {
		return func() _Ctype_int{ _cgo0 := /*line :259:40*/handle; var _cgo1 *_Ctype_char = /*line :259:48*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_match_noupgrade(_cgo0, _cgo1); }()
	})
}

func (h *Handle) NoExtracts() (StringList, error) {
	return h.optionGetList(func(handle * /*line :264:38*/_Ctype_struct___alpm_handle_t /*line :264:53*/) * /*line :264:56*/_Ctype_struct___alpm_list_t /*line :264:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :265:39*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_noextracts(_cgo0); }()
	})
}

func (h *Handle) AddNoExtract(hookDir string) error {
	return h.optionAddList(hookDir, func(handle * /*line :270:47*/_Ctype_struct___alpm_handle_t /*line :270:62*/, str * /*line :270:69*/_Ctype_char /*line :270:75*/)  /*line :270:77*/_Ctype_int /*line :270:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :271:38*/handle; var _cgo1 *_Ctype_char = /*line :271:46*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_add_noextract(_cgo0, _cgo1); }()
	})
}

func (h *Handle) SetNoExtracts(hookDirs []string) error {
	return h.optionSetList(hookDirs, func(handle * /*line :276:48*/_Ctype_struct___alpm_handle_t /*line :276:63*/, l * /*line :276:68*/_Ctype_struct___alpm_list_t /*line :276:81*/)  /*line :276:83*/_Ctype_int /*line :276:88*/ {
		return func() _Ctype_int{ _cgo0 := /*line :277:39*/handle; _cgo1 := /*line :277:47*/l; _cgoCheckPointer(_cgo0); _cgoCheckPointer(_cgo1); return _Cfunc_alpm_option_set_noextracts(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveNoExtract(dir string) (bool, error) {
	return h.optionRemoveList(dir, func(handle * /*line :282:46*/_Ctype_struct___alpm_handle_t /*line :282:61*/, str * /*line :282:68*/_Ctype_char /*line :282:74*/)  /*line :282:76*/_Ctype_int /*line :282:81*/ {
		return func() _Ctype_int{ _cgo0 := /*line :283:41*/handle; var _cgo1 *_Ctype_char = /*line :283:49*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_remove_noextract(_cgo0, _cgo1); }()
	})
}

func (h *Handle) MatchNoExtract(dir string) (bool, error) {
	return h.optionMatchList(dir, func(handle * /*line :288:45*/_Ctype_struct___alpm_handle_t /*line :288:60*/, str * /*line :288:67*/_Ctype_char /*line :288:73*/)  /*line :288:75*/_Ctype_int /*line :288:80*/ {
		return func() _Ctype_int{ _cgo0 := /*line :289:40*/handle; var _cgo1 *_Ctype_char = /*line :289:48*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_match_noextract(_cgo0, _cgo1); }()
	})
}

func (h *Handle) IgnorePkgs() (StringList, error) {
	return h.optionGetList(func(handle * /*line :294:38*/_Ctype_struct___alpm_handle_t /*line :294:53*/) * /*line :294:56*/_Ctype_struct___alpm_list_t /*line :294:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :295:39*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_ignorepkgs(_cgo0); }()
	})
}

func (h *Handle) AddIgnorePkg(hookDir string) error {
	return h.optionAddList(hookDir, func(handle * /*line :300:47*/_Ctype_struct___alpm_handle_t /*line :300:62*/, str * /*line :300:69*/_Ctype_char /*line :300:75*/)  /*line :300:77*/_Ctype_int /*line :300:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :301:38*/handle; var _cgo1 *_Ctype_char = /*line :301:46*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_add_ignorepkg(_cgo0, _cgo1); }()
	})
}

func (h *Handle) SetIgnorePkgs(hookDirs []string) error {
	return h.optionSetList(hookDirs, func(handle * /*line :306:48*/_Ctype_struct___alpm_handle_t /*line :306:63*/, l * /*line :306:68*/_Ctype_struct___alpm_list_t /*line :306:81*/)  /*line :306:83*/_Ctype_int /*line :306:88*/ {
		return func() _Ctype_int{ _cgo0 := /*line :307:39*/handle; _cgo1 := /*line :307:47*/l; _cgoCheckPointer(_cgo0); _cgoCheckPointer(_cgo1); return _Cfunc_alpm_option_set_ignorepkgs(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveIgnorePkg(dir string) (bool, error) {
	return h.optionRemoveList(dir, func(handle * /*line :312:46*/_Ctype_struct___alpm_handle_t /*line :312:61*/, str * /*line :312:68*/_Ctype_char /*line :312:74*/)  /*line :312:76*/_Ctype_int /*line :312:81*/ {
		return func() _Ctype_int{ _cgo0 := /*line :313:41*/handle; var _cgo1 *_Ctype_char = /*line :313:49*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_remove_ignorepkg(_cgo0, _cgo1); }()
	})
}

func (h *Handle) IgnoreGroups() (StringList, error) {
	return h.optionGetList(func(handle * /*line :318:38*/_Ctype_struct___alpm_handle_t /*line :318:53*/) * /*line :318:56*/_Ctype_struct___alpm_list_t /*line :318:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :319:41*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_ignoregroups(_cgo0); }()
	})
}

func (h *Handle) AddIgnoreGroup(hookDir string) error {
	return h.optionAddList(hookDir, func(handle * /*line :324:47*/_Ctype_struct___alpm_handle_t /*line :324:62*/, str * /*line :324:69*/_Ctype_char /*line :324:75*/)  /*line :324:77*/_Ctype_int /*line :324:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :325:40*/handle; var _cgo1 *_Ctype_char = /*line :325:48*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_add_ignoregroup(_cgo0, _cgo1); }()
	})
}

func (h *Handle) SetIgnoreGroups(hookDirs []string) error {
	return h.optionSetList(hookDirs, func(handle * /*line :330:48*/_Ctype_struct___alpm_handle_t /*line :330:63*/, l * /*line :330:68*/_Ctype_struct___alpm_list_t /*line :330:81*/)  /*line :330:83*/_Ctype_int /*line :330:88*/ {
		return func() _Ctype_int{ _cgo0 := /*line :331:41*/handle; _cgo1 := /*line :331:49*/l; _cgoCheckPointer(_cgo0); _cgoCheckPointer(_cgo1); return _Cfunc_alpm_option_set_ignoregroups(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveIgnoreGroup(dir string) (bool, error) {
	return h.optionRemoveList(dir, func(handle * /*line :336:46*/_Ctype_struct___alpm_handle_t /*line :336:61*/, str * /*line :336:68*/_Ctype_char /*line :336:74*/)  /*line :336:76*/_Ctype_int /*line :336:81*/ {
		return func() _Ctype_int{ _cgo0 := /*line :337:43*/handle; var _cgo1 *_Ctype_char = /*line :337:51*/str; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_remove_ignoregroup(_cgo0, _cgo1); }()
	})
}

/*func (h *Handle) optionGetList(f func(*C.alpm_handle_t) *C.alpm_list_t) (StringList, error){
	alpmList := f(h.ptr)
	goList := StringList{(*list)(unsafe.Pointer(alpmList))}

	if alpmList == nil {
		return goList, h.LastError()
	}
	return goList, nil
}*/

//use alpm_depend_t
func (h *Handle) AssumeInstalled() (DependList, error) {
	alpmList := func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :353:48*/h.ptr; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_assumeinstalled(_cgo0); }()
	depList := DependList{(*list)(unsafe.Pointer(alpmList))}

	if alpmList == nil {
		return depList, h.LastError()
	}
	return depList, nil
}

func (h *Handle) AddAssumeInstalled(dep Depend) error {
	cDep := convertCDepend(dep)
	defer freeCDepend(cDep)

	ok := func() _Ctype_int{ _cgo0 := /*line :366:42*/h.ptr; _cgo1 := /*line :366:49*/cDep; _cgoCheckPointer(_cgo0); _cgoCheckPointer(_cgo1); return _Cfunc_alpm_option_add_assumeinstalled(_cgo0, _cgo1); }()
	if ok < 0 {
		return h.LastError()
	}
	return nil
}

// TODO: Fix
// func (h *Handle) SetAssumeInstalled(deps []Depend) error {
// 	//calling this function the first time causes alpm to set the
// 	//assumeinstalled list to a list containing go allocated alpm_depend_t's
// 	//this is bad because alpm might at some point tree to free them
// 	//i believe this is whats causing this function to misbhave
// 	//although i am not 100% sure
// 	//maybe using C.malloc to make the struct could fix the problem
// 	//pacamn does not use alpm_option_set_assumeinstalled in its source
// 	//code so anybody using this should beable to do file without it
// 	//although for the sake of completeness it would be nice to have this
// 	//working
// 	panic("This function (SetAssumeInstalled) does not work properly, please do not use. See source code for more details")
// 	var list *C.alpm_list_t

// 	for _, dep := range deps {
// 		cDep := convertCDepend(dep)
// 		defer freeCDepend(cDep)
// 		list = C.alpm_list_add(list, unsafe.Pointer(cDep))
// 	}

// 	ok := C.alpm_option_set_assumeinstalled(h.ptr, list)
// 	if ok < 0 {
// 		return h.LastError()
// 	}
// 	return nil

// }

// TODO: Fix
//  func (h *Handle) RemoveAssumeInstalled(dep Depend) (bool, error) {
//internally alpm uses alpm_list_remove to remove a alpm_depend_t from
//the list
//i believe this function considers items equal if they are the same
//item in memeory, not just the same data
//every time we convert a go Depend to a alpm_depend_c we create a new
//instance of a alpm_depend_c
//this means that if you add a Depend using AddAssumeInstalled then try
//to remove it using the same Depend c will consider them different
//items and not remove them
//pacamn does not use alpm_option_set_assumeinstalled in its source
//code so anybody using this should beable to do file without it
//although for the sake of completeness it would be nice to have this
//working
// 	panic("This function (RemoveAssumeInstalled) does not work properly, please do not use. See source code for more details")
// 	cDep := convertCDepend(dep)
// 	defer freeCDepend(cDep)

// 	ok := C.alpm_option_remove_assumeinstalled(h.ptr, cDep)
// 	if ok < 0 {
// 		return ok == 1, h.LastError()
// 	}
// 	return ok == 1, nil
// }

func (h *Handle) Arch() (string, error) {
	return h.optionGetStr(func(handle * /*line :429:37*/_Ctype_struct___alpm_handle_t /*line :429:52*/) * /*line :429:55*/_Ctype_char /*line :429:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :430:33*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_arch(_cgo0); }()
	})
}

func (h *Handle) SetArch(str string) error {
	return h.optionSetStr(str, func(handle * /*line :435:42*/_Ctype_struct___alpm_handle_t /*line :435:57*/, cStr * /*line :435:65*/_Ctype_char /*line :435:71*/)  /*line :435:73*/_Ctype_int /*line :435:78*/ {
		return func() _Ctype_int{ _cgo0 := /*line :436:33*/handle; var _cgo1 *_Ctype_char = /*line :436:41*/cStr; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_set_arch(_cgo0, _cgo1); }()
	})
}

// LocalDB returns the local database relative to the given handle.
func (h *Handle) LocalDB() (*DB, error) {
	db := func() *_Ctype_struct___alpm_db_t{ _cgo0 := /*line :442:27*/h.ptr; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_get_localdb(_cgo0); }()
	if db == nil {
		return nil, h.LastError()
	}
	return &DB{db, *h}, nil
}

// SyncDBs returns list of Synced DBs.
func (h *Handle) SyncDBs() (DBList, error) {
	dblist := func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :451:31*/h.ptr; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_get_syncdbs(_cgo0); }()
	if dblist == nil {
		return DBList{nil, *h}, h.LastError()
	}
	dblistPtr := unsafe.Pointer(dblist)
	return DBList{(*list)(dblistPtr), *h}, nil
}

func (h *Handle) CheckSpace() (bool, error) {
	ok := func() _Ctype_int{ _cgo0 := /*line :460:37*/h.ptr; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_checkspace(_cgo0); }()
	b := false

	if ok > 0 {
		b = true
	}
	if ok < 0 {
		return b, h.LastError()
	}
	return b, nil
}

func (h *Handle) SetCheckSpace(value bool) error {
	var cValue  /*line :473:13*/_Ctype_int /*line :473:18*/
	if value {
		cValue = 1
	}

	ok := func() _Ctype_int{ _cgo0 := /*line :478:37*/h.ptr; var _cgo1 _Ctype_int = /*line :478:44*/cValue; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_set_checkspace(_cgo0, _cgo1); }()
	if ok < 0 {
		return h.LastError()
	}
	return nil
}

func (h *Handle) DBExt() (string, error) {
	return h.optionGetStr(func(handle * /*line :486:37*/_Ctype_struct___alpm_handle_t /*line :486:52*/) * /*line :486:55*/_Ctype_char /*line :486:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :487:34*/handle; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_dbext(_cgo0); }()
	})
}

func (h *Handle) SetDBExt(str string) error {
	return h.optionSetStr(str, func(handle * /*line :492:42*/_Ctype_struct___alpm_handle_t /*line :492:57*/, cStr * /*line :492:65*/_Ctype_char /*line :492:71*/)  /*line :492:73*/_Ctype_int /*line :492:78*/ {
		return func() _Ctype_int{ _cgo0 := /*line :493:34*/handle; var _cgo1 *_Ctype_char = /*line :493:42*/cStr; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_set_dbext(_cgo0, _cgo1); }()
	})
}

func (h *Handle) GetDefaultSigLevel() (SigLevel, error) {
	sigLevel := func() _Ctype_int{ _cgo0 := /*line :498:49*/h.ptr; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_default_siglevel(_cgo0); }()

	if sigLevel < 0 {
		return SigLevel(sigLevel), h.LastError()
	}
	return SigLevel(sigLevel), nil
}

func (h *Handle) SetDefaultSigLevel(siglevel SigLevel) error {
	ok := func() _Ctype_int{ _cgo0 := /*line :507:43*/h.ptr; var _cgo1 _Ctype_int = _Ctype_int(siglevel); _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_set_default_siglevel(_cgo0, _cgo1); }()

	if ok < 0 {
		return h.LastError()
	}
	return nil
}

func (h *Handle) GetLocalFileSigLevel() (SigLevel, error) {
	sigLevel := func() _Ctype_int{ _cgo0 := /*line :516:52*/h.ptr; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_local_file_siglevel(_cgo0); }()

	if sigLevel < 0 {
		return SigLevel(sigLevel), h.LastError()
	}
	return SigLevel(sigLevel), nil
}

func (h *Handle) SetLocalFileSigLevel(siglevel SigLevel) error {
	ok := func() _Ctype_int{ _cgo0 := /*line :525:46*/h.ptr; var _cgo1 _Ctype_int = _Ctype_int(siglevel); _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_set_local_file_siglevel(_cgo0, _cgo1); }()

	if ok < 0 {
		return h.LastError()
	}
	return nil
}

func (h *Handle) GetRemoteFileSigLevel() (SigLevel, error) {
	sigLevel := func() _Ctype_int{ _cgo0 := /*line :534:53*/h.ptr; _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_get_remote_file_siglevel(_cgo0); }()

	if sigLevel < 0 {
		return SigLevel(sigLevel), h.LastError()
	}
	return SigLevel(sigLevel), nil
}

func (h *Handle) SetRemoteFileSigLevel(siglevel SigLevel) error {
	ok := func() _Ctype_int{ _cgo0 := /*line :543:47*/h.ptr; var _cgo1 _Ctype_int = _Ctype_int(siglevel); _cgoCheckPointer(_cgo0); return _Cfunc_alpm_option_set_remote_file_siglevel(_cgo0, _cgo1); }()

	if ok < 0 {
		return h.LastError()
	}
	return nil
}
