// Code generated by cmd/cgo; DO NOT EDIT.

//line /tmp/build_aur/yay/src/yay-9.4.2/vendor/github.com/Jguer/go-alpm/callbacks.go:1:1
// callbacks.go - Handles libalpm callbacks.
//
// Copyright (c) 2013 The go-alpm Authors
//
// MIT Licensed. See LICENSE for details.

package alpm

/*
#include <stdint.h>
#include <alpm.h>
void logCallback(alpm_loglevel_t level, char *cstring);
void go_alpm_log_cb(alpm_loglevel_t level, const char *fmt, va_list arg);
void go_alpm_set_logging(alpm_handle_t *handle);
void go_alpm_set_question(alpm_handle_t *handle);
*/
import _ "unsafe"

import (
	"unsafe"
)

type logCallbackSig func(LogLevel, string)
type questionCallbackSig func(QuestionAny)

var DefaultLogLevel = LogWarning

func DefaultLogCallback(lvl LogLevel, s string) {
	if lvl <= DefaultLogLevel {
		print("go-alpm: ", s)
	}
}

var globalLogCallback logCallbackSig
var globalQuestionCallback questionCallbackSig

//export logCallback
func logCallback(level  /*line :38:24*/_Ctype_alpm_loglevel_t /*line :38:41*/, cstring * /*line :38:52*/_Ctype_char /*line :38:58*/) {
	globalLogCallback(LogLevel(level), ( /*line :39:37*/_Cfunc_GoString /*line :39:46*/)(cstring))
}

//export questionCallback
func questionCallback(question * /*line :43:33*/_Ctype_alpm_question_t /*line :43:50*/) {
	q := (* /*line :44:9*/_Ctype_struct__alpm_question_any_t /*line :44:30*/)(unsafe.Pointer(question))
	globalQuestionCallback(QuestionAny{q})
}

func (h *Handle) SetLogCallback(cb logCallbackSig) {
	globalLogCallback = cb
	func() { _cgo0 := /*line :50:24*/h.ptr; _cgoCheckPointer(_cgo0); _Cfunc_go_alpm_set_logging(_cgo0); }()
}

func (h *Handle) SetQuestionCallback(cb questionCallbackSig) {
	globalQuestionCallback = cb
	func() { _cgo0 := /*line :55:25*/h.ptr; _cgoCheckPointer(_cgo0); _Cfunc_go_alpm_set_question(_cgo0); }()
}
